import { describe, it, expect, vi, beforeEach } from 'vitest'
import axios from 'axios'
import { apiClient } from '../apiClient'

// Mock axios
vi.mock('axios')
const mockedAxios = axios as vi.Mocked<typeof axios>

describe('ApiClient', () => {
  beforeEach(() => {
    vi.clearAllMocks()
    // Clear localStorage
    localStorage.clear()
  })

  describe('login', () => {
    it('should successfully login with valid credentials', async () => {
      const mockResponse = {
        data: {
          succeeded: true,
          token: 'test-token',
          refreshToken: 'test-refresh-token',
        },
      }

      mockedAxios.create = vi.fn().mockReturnValue({
        post: vi.fn().mockResolvedValue(mockResponse),
        interceptors: {
          request: { use: vi.fn() },
          response: { use: vi.fn() },
        },
      })

      const credentials = {
        email: 'test@example.com',
        password: 'password123',
      }

      const result = await apiClient.login(credentials)

      expect(result.success).toBe(true)
      expect(result.data?.token).toBe('test-token')
      expect(result.data?.user.email).toBe('test@example.com')
    })

    it('should handle login failure', async () => {
      const mockResponse = {
        data: {
          succeeded: false,
          errors: [{ description: 'Invalid credentials' }],
        },
      }

      mockedAxios.create = vi.fn().mockReturnValue({
        post: vi.fn().mockResolvedValue(mockResponse),
        interceptors: {
          request: { use: vi.fn() },
          response: { use: vi.fn() },
        },
      })

      const credentials = {
        email: 'test@example.com',
        password: 'wrongpassword',
      }

      const result = await apiClient.login(credentials)

      expect(result.success).toBe(false)
      expect(result.error).toBe('Invalid credentials')
    })

    it('should handle network errors', async () => {
      mockedAxios.create = vi.fn().mockReturnValue({
        post: vi.fn().mockRejectedValue(new Error('Network error')),
        interceptors: {
          request: { use: vi.fn() },
          response: { use: vi.fn() },
        },
      })

      const credentials = {
        email: 'test@example.com',
        password: 'password123',
      }

      const result = await apiClient.login(credentials)

      expect(result.success).toBe(false)
      expect(result.error).toBe('Network error. Please try again.')
    })
  })

  describe('register', () => {
    it('should successfully register and auto-login', async () => {
      const registerResponse = {
        data: { message: 'Registration successful' },
        status: 200,
      }

      const loginResponse = {
        data: {
          succeeded: true,
          token: 'test-token',
          refreshToken: 'test-refresh-token',
        },
      }

      mockedAxios.create = vi.fn().mockReturnValue({
        post: vi
          .fn()
          .mockResolvedValueOnce(registerResponse) // First call for register
          .mockResolvedValueOnce(loginResponse), // Second call for login
        interceptors: {
          request: { use: vi.fn() },
          response: { use: vi.fn() },
        },
      })

      const userData = {
        firstName: 'John',
        lastName: 'Doe',
        email: 'john@example.com',
        phone: '+1234567890',
        password: 'password123',
      }

      const result = await apiClient.register(userData)

      expect(result.success).toBe(true)
      expect(result.data?.user.email).toBe('john@example.com')
      expect(result.message).toBe('Registration successful')
    })

    it('should handle registration failure', async () => {
      const mockError = {
        response: {
          data: { error: 'Email already exists' },
        },
      }

      mockedAxios.create = vi.fn().mockReturnValue({
        post: vi.fn().mockRejectedValue(mockError),
        interceptors: {
          request: { use: vi.fn() },
          response: { use: vi.fn() },
        },
      })

      const userData = {
        firstName: 'John',
        lastName: 'Doe',
        email: 'john@example.com',
        phone: '+1234567890',
        password: 'password123',
      }

      const result = await apiClient.register(userData)

      expect(result.success).toBe(false)
      expect(result.error).toBe('Email already exists')
    })
  })

  describe('token management', () => {
    it('should store and retrieve tokens', () => {
      const token = 'test-token'
      localStorage.setItem('auth_token', token)

      expect(apiClient.getToken()).toBe(token)
      expect(apiClient.isAuthenticated()).toBe(true)
    })

    it('should handle missing tokens', () => {
      expect(apiClient.getToken()).toBe(null)
      expect(apiClient.isAuthenticated()).toBe(false)
    })
  })
})
